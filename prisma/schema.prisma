//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_PRISMA_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    Admin
    User
}

enum InvolvedPartyType {
    LAW_ENFORCEMENT
    REPORTING_USER
    REPORTED_USER
}

enum CaseLogType {
    ADD
    DELETE
    UPDATE
}

enum CaseSeverity {
    URGENT
    HIGH
    MEDIUM
    LOW
}

/// @@allow('create', true)
/// @@allow('all', auth() == this || auth().role == Admin)
model User {
    id String @id() @default(cuid())
    name String?
    /// @email
    email String @unique()
    role Role @default(User)
    createdByCases Case[] @relation(name: "createdBy")
    assignedToCases Case[] @relation(name: "assignedTo")
    notes Note[]
    caseLogs CaseLog[]
}

/// @@allow('read, create, update', auth() != null)
/// @@allow('all', auth().role == Admin)
model Identifier {
    id String @id() @default(cuid())
    type String
    name String
    involvedParties InvolvedParty[]
}

/// @@allow('read, create, update', auth() != null)
/// @@allow('all', auth().role == Admin)
model InvolvedParty {
    id String @id() @default(cuid())
    name String
    type InvolvedPartyType
    identifiers Identifier[]
    cases Case[]
}

/// @@allow('read, create, update', auth() != null)
/// @@allow('all', auth().role == Admin)
model Note {
    id String @id() @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt() @db.Timestamptz(6)
    description String @db.Text()
    createdById String
    createdBy User @relation(fields: [createdById], references: [id])
    caseId String
    case Case @relation(fields: [caseId], references: [id])
}

/// @@allow('read, create, update', auth() != null)
/// @@allow('all', auth().role == Admin)
model CaseLog {
    id String @id() @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt() @db.Timestamptz(6)
    fieldName String
    type CaseLogType
    fromValue String
    toValue String
    createdById String
    createdBy User @relation(fields: [createdById], references: [id])
    caseId String
    case Case @relation(fields: [caseId], references: [id])
}

/// @@allow('read, create, update', auth() != null)
/// @@allow('all', auth().role == Admin)
model Case {
    id String @id() @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt() @db.Timestamptz(6)
    createdById String
    createdBy User @relation(fields: [createdById], references: [id], name: "createdBy")
    title String
    description String? @db.Text()
    caseLogs CaseLog[]
    notes Note[]
    caseStatus String?
    involvedParties InvolvedParty[]
    documentLinks Json[]
    severity CaseSeverity @default(MEDIUM)
    assignedToId String?
    assignedTo User? @relation(fields: [assignedToId], references: [id], name: "assignedTo")
    caseInputData Json?
}